{
  "_from": "templatesjs",
  "_id": "templatesjs@2.0.0",
  "_inBundle": false,
  "_integrity": "sha512-DK/xkW4Zq6B6J6uer09WU65NHEzIrY3uOHXD/Z00PQqDdRZTJBvDQbjsQJzxqj212jajOzYoRpBJIiCeeZSAxA==",
  "_location": "/templatesjs",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "templatesjs",
    "fetchSpec": "latest",
    "name": "templatesjs",
    "raw": "templatesjs",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/templatesjs/-/templatesjs-2.0.0.tgz",
  "_shasum": "05f1bd597c5356431b08bd971d9c59b413ebe488",
  "_spec": "templatesjs",
  "_where": "/root/G14_B_P2/G14_B_P2/src/web",
  "author": {
    "name": "Imtiaz Chowdhury"
  },
  "bugs": {
    "url": "https://github.com/ImtiazChowdhury/templatesjs/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Render template dynamically , works with any file format including HTML",
  "devDependencies": {
    "chai": "^4.1.1",
    "mocha": "^3.5.0"
  },
  "directories": {
    "test": "test"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "homepage": "https://github.com/ImtiazChowdhury/templatesjs#readme",
  "keywords": [
    "dynamic",
    "engine",
    "include",
    "render",
    "template",
    "view"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "templatesjs",
  "optionalDependencies": {},
  "readme": "#\t\t\t\t\t\ttemplatesjs\r\n\r\n\r\n\r\n### Render dynamic data to your template.\r\n\r\n[![Build Status](https://travis-ci.org/ImtiazChowdhury/templatesjs.svg?branch=master)](https://travis-ci.org/ImtiazChowdhury/templatesjs)\r\n[![node](https://img.shields.io/node/v/templatesjs.svg)]()\r\n[![Dependencies](https://img.shields.io/badge/Dependencies-none-brightgreen.svg)]()\r\n[![npm](https://img.shields.io/npm/v/templatesjs.svg)]()\r\n\r\n[![npm](https://img.shields.io/npm/l/templatesjs.svg)]()\r\n[![npm](https://img.shields.io/npm/dt/templatesjs.svg)]()\r\n\r\n## Features\r\n\r\n* **Output data with <%%>**\r\n* **Output String, Array, Object.property**\r\n* **Format Output**\r\n* **UPPERCASE, Capitalized, Lowercase Output**\r\n* **Include**\r\n* **Custom delimiters (e.g., use <# #> instead of <% %>)**\r\n* **Sync and Async versions of all vailable functiond**\r\n\r\n###New in 2.0.0\r\n* **renderAll()** : render all variable in one declaration\r\n* **renderAllSync()** : Sync version of `renderAll()`\r\n* **Sync And Async versions of all available functions**  \r\n\r\n###Changes Made in 2.0.0\r\n* `render(),set()` requires callback functions . \r\n* Use `renderSync()` and `setSync()` without callbacks which will behave like `render()` and `set()` of earlier versions.\r\n* use `delim` as a variable instead of function `delim()`\r\n\t\r\n## Table of contents:\r\n\r\n- [Install](#installation)\r\n- [Usage](#usage)\r\n- [API](#api)\r\n- [Detail Usage](#detail-usage)\r\n    - [String](#string)\r\n    - [Object](#object)\r\n    - [Array](#array)\r\n    - [Loop through array](#loop-through-array)\r\n    - [Loop through specific array indexes](#loop-through-specific-index-of-array)\r\n\t- [Specify format of output](#format-of-output)\r\n\t- [UPPERCASE, Capitalized, lowercase output](#specify-case)\r\n\t- [Include files](#include-file)\r\n\t- [Set default directory](#set-default-directory)\r\n\t- [Change delimiter](#delimiter-sign)\r\n\t- [Shorthands for functions](#shorthands-for-functions)\r\n\t\r\n- [Test](#test)\r\n\r\n## Installation\r\n\r\n  ```sh  \r\n$ npm install templatesjs  \r\n```  \r\n\r\n### Using git \r\n \r\n  ```sh  \r\n  $ git clone https://github.com/ImtiazChowdhury/templatesjs.git  \r\n ```  \r\n \r\n# Usage  \r\n\r\n\r\n*Example html* :   \r\n```html \r\n\r\n\t<body>\r\n\t\tHello <%name%>\r\n\t</body>  \r\n```  \r\n*node.js*\r\n\r\n**Sync**   \r\n```js  \r\n\r\n\tvar data = templatesjs.renderSync(\"name\", \"John Doe\");\r\n\t\r\n```  \r\n\r\n**Async**  \r\n\r\n```js      \r\n\r\n\ttemplatesjs.render(\"name\", \"John Doe\", function(err,data){\r\n\t\tif(err) //Handle err\r\n\t\t\r\n\t\t//Output the data\r\n\t});   \r\n```  \r\n\r\n\r\n*Output* :   \r\n    Hello John Doe\r\n\r\n\r\n\r\n## Multiple variables \r\n\r\n*Example html* :   \r\n  \r\n```html     \r\n\r\n\t<body>\r\n\t\tHello <%firstname%> <%lastname%> \r\n\t\t\r\n\t</body>  \r\n```  \r\n\r\n*node.js*\r\n\r\n**Sync**   \r\n```js    \r\n\r\n\tvar data = templatesjs.renderSync(\"firstame\", \"John\");\r\n\tdata = templatesjs.renderSync(\"lastname\", \"Doe\");  \r\n\t\r\n```    \r\n\r\n**Async**\r\n\r\n```js   \r\n \r\n\ttemplatesjs.render(\"firstname\", \"John\", function(err,data){  \r\n\t\tif(err) //Handle err  \r\n\t\ttemplatesjs.render(\"lastname\", \"Doe\", function(err,data){  \r\n\t\t\tif(err) //Handle err  \r\n\t\t\t//Output the data  \r\n\t\t}\r\n\t});    \r\n```    \r\n\r\nThe function `render()` looks good when working with one or two dynamic data(s). But it will become a *nightmare* for larger amount.\r\nImagine ten or fifteen dynamic variables to render. That's why in vesion `2.0.0` introducing the function `renderAll()`\r\n\r\nthe same of the above can be done like this:\r\n\r\n**Async**\r\n\r\n```js  \r\n\r\n\tvar list = {\r\n\t\tfirstname:\"John\",\r\n\t\tlastname:\"Doe\"\r\n\t}\r\n\t\r\n\ttemplatesjs.renderAll(list, function(err,data){\r\n\t\tif(err) //handle the err\r\n\t\t\r\n\t\t//output the data\r\n\t});   \r\n```  \r\n\r\n**Sync**  \r\n  \r\n```js  \r\n\r\n\tvar list = {\r\n\t\tfirstname:\"John\",\r\n\t\tlastname:\"Doe\"\r\n\t}\r\n\t\r\n\tvar data =templatesjs.renderAll(list);\r\n\t// Output the data;  \r\n\r\n```  \r\n\r\n##Set Data : \r\n\r\nSuppose that we have to work with this : (index.html)\r\n  \r\n```html  \r\n\t<html >\r\n\t<body>\r\n\t\tHello Dear <%username%> <br />\r\n\t\tYou email : <%email%> <br />\r\n\t</body>\r\n\t</html>  \r\n```  \r\nhere we will walk through a complete example from reading a file to output it.\r\n  \r\n```js  \r\n\r\n\t//assume that you have a request for index.html\r\n\t\r\n\tfs.readFile(\"./index.html\", function(err,data){\r\n\t\tif(err) throw err;\r\n\t\t\r\n\t\t//we have to set the file to templatesjs to work with\r\n\t\t//do this once for each file, templatesjs work with the data you set\r\n\t\t\r\n\t\ttemplatesjs.set(data, function(err,data){\r\n\t\t\tif(err) throw err;\r\n\t\t\t\r\n\t\t\t//now use your favourite function to render \r\n\t\t\tvar list = {\r\n\t\t\t\tusername:\"John Doe\",\r\n\t\t\t\temail : \"John@Doe.com\"\r\n\t\t\t}\r\n\t\t\ttemplatesjs.renderAll(list, function(err,data){\r\n\t\t\t\tif(err) throw err;\r\n\t\t\t\tres.write(data);\r\n\t\t\t\tres.end();\r\n\t\t\t});\r\n\t\t});\r\n\t});  \r\n```  \r\n\r\nthere is a Sync version of `set()` which is `setSync()` with only one parameter the `data`.\r\n\r\n\r\n##API  \r\n       \r\n\trender(\"keyword\",\"value\", cb)  \r\n        keyword - [REQUIRED] - the keyword of the tag ; \r\n        Value - [REQUIRED] - the value of the keyword ;  \r\n        cb - [REQUIRED] - a callback to be fired once the changes have been made. \r\n\t\t\tIf cb is not specified, an error will be thrown.\r\n\t\t\t\t\t\t\t\r\n            err - First parameter to the callback detailing any errors.\r\n            data - the processed data with changes made in it.\r\n\r\n\t  \r\n\trenderSync(\"keyword\",\"value\")\r\n        keyword - [REQUIRED] - the keyword of the tag ;\r\n        Value - [REQUIRED] - the value of the keyword ;\r\n\t\r\n\trenderAll(list, cb)\r\n        list - [REQUIRED] - an object with the list of variable to render, \r\n\t\t\t\tvariable names as property and values as property value;\r\n\t\t\t\t\t\r\n        cb - [REQUIRED] - a callback to be fired once the changes have been made.\r\n\t\t\t\tIf cb is not specified, an error will be thrown.\r\n\t\t\t\t\t\t\t\r\n            err - First parameter to the callback detailing any errors.\r\n            data - the processed data with changes made in it.\r\n\r\n\t\r\n\trenderAllSync(list, cb)\r\n        list - [REQUIRED] - an object with the list of variable to render, variable \r\n\t\t\t\tnames as property and values as property value;\r\n\r\n\tset(data, cb)\r\n        data - [REQUIRED] - the data to work with (e.g.: data read from index.html)\r\n        cb - [REQUIRED] - a callback to be fired once the changes have been made. \r\n\t\t\tIf cb is not specified, an error will be thrown.\r\n            err - First parameter to the callback detailing any errors.\r\n            data - the processed data with changes made in it.\r\n\r\n\tsetSync(data)\r\n        data - [REQUIRED] - the data to work with (e.g.: data read from index.html)\r\n\t\t\r\n\t\r\n#Detail Usage\r\n\tYou can render view using four diiferent functions `render(), renderSync(),  \r\n\trenderAll(), renderAllSync()`.\r\n\tread a file, set the data using `set()` and render it using you favourite   \r\n\tone.\r\n\t\r\n\tWe will Walk through examples for each data type and diiferent cases to handle   \r\n\tthem.\r\n\t\r\n##string\r\nUse <% %> to use rendered data in HTML page\r\n\t\r\n\texamle HTML(index.html)\r\n\t  \r\n```html  \r\n\t<!DOCTYPE HTML>\r\n\t<html>\r\n\t<body>\r\n\t\tHELLO <%firstname%> <%lastname%>\r\n\t</body>\r\n\t</html>  \r\n```  \r\n\t\r\nhere we will replace the `<%user%>` tag with John Doe;\r\n\r\n`in node.js file`\r\n\r\n**Sync**  \t\r\n\r\n\t  \r\n```js   \r\n\r\n\tvar templatesjs = require('templatesjs');\r\n\tfs.readFile(\"./index.html\", function(err,data){\r\n\t\tif(err) throw err\r\n\t\t\r\n\t\t\r\n\t\ttemplatesjs.setSync(data);\t//set the data to work with\r\n\t\tvar output = templatesjs.renderSync(\"firstname\", \"John\");\r\n\t\toutput = templatesjs.renderSync(\"lastname\", \"Doe\");\r\n\t\t\r\n\t\t\r\n\t\tres.write(output);\r\n\t\tres.end();\r\n\t\t\r\n\t});  \r\n```  \r\n\r\n**Async**\r\n\t  \r\n```js   \r\n\r\n\tvar templatesjs = require('templatesjs');\r\n\tfs.readFile(\"./index.html\", function(err,data){\r\n\t\tif(err) throw err\r\n\t\t\r\n\t\ttemplatesjs.set(data, function(err,data){\r\n\t\t\tif(err) throw err;\r\n\t\t\t\r\n\t\t\ttemplatesjs.render(\"firstname\", \"John\", function(err,data){\r\n\t\t\t\tif(err) throw err;\r\n\t\t\t\t\r\n\t\t\t\ttemplatesjs.render(\"lastname\", \"Doe\", function(err,data){\r\n\t\t\t\t\tif(err) throw err;\r\n\t\t\t\t\t\r\n\t\t\t\t\tres.write(data);\r\n\t\t\t\t\tres.end(); // or Do something else with the data\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\t\r\n\t});  \r\n```  \r\n\r\n**Async Using `renderAll()`**\r\n\t  \r\n```js   \r\n\r\n\tvar templatesjs = require('templatesjs');\r\n\tvar list = {\r\n\t\tfirstname:\"John\",\r\n\t\tlastname:\"Doe\",\r\n\t}\r\n\tfs.readFile(\"./index.html\", function(err,data){\r\n\t\tif(err) throw err\r\n\t\t\r\n\t\ttemplatesjs.set(data, function(err,data){\r\n\t\t\tif(err) throw err;\r\n\t\t\t\r\n\t\t\ttemplatesjs.renderAll(list, function(err,data){\r\n\t\t\t\tif(err) throw err;\r\n\t\t\t\tres.write(data);\r\n\t\t\t\tres.end(); // or Do something else with the data\r\n\t\t\t\t\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\t \r\n```  \r\n\r\n**Sync Using `renderAllSync()`**\r\n  \r\n```js   \r\n\tvar templatesjs = require('templatesjs'); \r\n\tvar list = {  \r\n\t\tfirstname:\"John\",  \r\n\t\tlastname:\"Doe\",  \r\n\t}  \r\n\tvar data = fs.readFileSync(\"./index.html\");  \r\n\ttemplatesjs.setSync(data);   \r\n\tvar output = templatesjs.renderAllSync(list);  \r\n\tres.write(output);  \r\n\tres.end();    \r\n```  \r\n\r\n\t\r\n\t\r\nthis will print `\"HELLO John Doe\"` on the browser instead of `hello <%user%>`\r\n\r\ntemplatesjs work with the data you set using set(). It modifies the data and returns the modified data.  \r\nIt will all `<%firstname%>` tags in the data with \"John\" and return the data.\r\n\t\r\n## object\r\nwe can also render array or object value as\r\n\t\r\n\t\r\n```html  \r\n\r\n\t<body>\r\n\t\tHELLO <%user.name%>\r\n\t</body>\r\n\t   \r\n``` \r\n`in node.js file`\r\n\r\n**Sync**\r\n\r\n```js  \r\n\tvar profile = {name:\"John Doe\",age:\"18\"};\r\n\tvar data = fs.readFileSync(\"./index.html\");\r\n\t\r\n\ttemplatesjs.setSync(data);\r\n\tdata = templatesjs.renderSync(\"user\", profile);\r\n\t   \r\n```  \r\nthis will print \"HELLO John Doe\"\r\n\r\n**Async**\r\n\r\n\r\n```js   \r\n\tvar profile = {name:\"John Doe\",age:\"18\"};\r\n\tvar data = fs.readFile(\"./index.html\", function(err,data){\r\n\t\t\r\n\t\ttemplatesjs.set(data, function(err,data){\r\n\t\t\tif(err) //Do something with the error;\r\n\t\t\t\r\n\t\t\ttemplatesjs.render(\"user\", profile, function(err,data){\r\n\t\t\t\tif(err) // Do something with the err\r\n\t\t\t\t\r\n\t\t\t\t//Output the data\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t});\r\n\t\t\r\n\t});\r\n\t    \r\n```  \r\nTemplatesjs won't render the object `profile` to the page,   \r\nit will only relace the `<%user.name%>` with the `name` property of `profile` object.\r\n\r\n\t\r\n## array\r\n\t\r\nfor array:\r\n\t\r\n\t\r\n```html  \r\n\r\n\t<body>\r\n\t\tHELLO <%user[0]%>\r\n\t</body>\r\n\t\r\n```  \r\n`in node.js file`\r\n\r\n**Sync**\r\n\r\n```js  \r\n\r\n\tvar data = fs.readFileSync(\"./index.html\");\r\n\ttemplatesjs.setSync(data);\r\n\tvar profile =[\"John Doe\", \"18\"];\r\n\tdata = templatesjs.renderSync(\"user\", profile);\r\n\t\r\n```  \r\n\r\n**Async**\r\n\r\n```js  \r\n\r\n\tvar profile =[\"John Doe\", \"18\"];\r\n\tvar data = fs.readFile(\"./index.html\", function(err,data){\r\n\t\ttemplatesjs.set(data, function(err,data){\r\n\t\t\tif(err) //Do something with the error;\r\n\t\t\t\r\n\t\t\ttemplatesjs.render(\"user\", profile, function(err,data){\r\n\t\t\t\tif(err) //Do something with the error;\r\n\t\t\t\t\r\n\t\t\t\t//output the data\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n\t  \r\n```  \r\nthis will print `\"HELLO John Doe\"`\r\n\t\r\n\t\r\n## loop through array\r\n\t\r\nor all values of an array :\r\n\t\r\n```html  \r\n\r\n\t<body>\r\n\t\tHELLO <%user[]%>\r\n\t</body>\r\n\t\r\n```  \r\n`in node.js file`\r\n\r\n**Sync**\r\n\r\n```js  \r\n\tvar profile =[\"John Doe\", \"18\"];\r\n\tvar data = fs.readFileSync(\"./index.html\");\r\n\r\n\ttemplatesjs.setSync(data);\r\n\tdata = templatesjs.renderSync(\"user\", profile);\r\n\t \r\n```  \r\n**Async**\r\n\r\n```js\r\n\r\n\tvar data = fs.readFile(\"./index.html\", function(err,data){\r\n\t\tvar profile =[\"John Doe\", \"18\"];\r\n\t\ttemplatesjs.set(data, function(err,data){\r\n\t\t\tif(err) //Do something with the error;\r\n\t\t\t\r\n\t\t\ttemplatesjs.render(\"user\", profile, function(err,data){\r\n\t\t\t\tif(err) // do something with the error\r\n\t\t\t\t\r\n\t\t\t\t//output the data\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n\t\r\n```\r\n\r\n\r\nthis will print `\"HELLO John Doe18\"`\r\n\t\r\n\t\r\n## loop through specific index of array\r\n\t\r\nall array values starting from an index to another one\r\n\t\r\n```html\r\n\r\n\t<body>\r\n\t\tHELLO <%user[2,5]%> \r\n\t\t\r\n\t\t<!-- \r\n\t\t**in the bracket the first number indicates the index \r\n\t\t**from where the values should start and the\r\n\t\t** second one indicates the index of stopping point\r\n\t\t-->\r\n\t\t\r\n\t</body>\r\n\t\r\n```\r\n`in node.js file`\r\n\r\n**Sync**\r\n\r\n```js\r\n\r\n\tvar data = fs.readFileSync(\"./index.html\");\r\n\ttemplatesjs.setSync(data);\r\n\tvar profile =[\"John\", \"Doe\", \"18\", \"hello\", \"world\", \"JS\"];\r\n\tdata = templatesjs.renderSync(\"user\", profile);\r\n\r\n```\r\n**Async**\r\n\r\n```js\r\n\r\n\tvar data = fs.readFile(\"./index.html\", function(err,data){\r\n\tvar profile =[\"John\", \"Doe\", \"18\", \"hello\", \"world\", \"JS\"];\r\n\t\ttemplatesjs.set(data, function(err,data){\r\n\t\t\tif(err) //Do something with the error;\r\n\t\t\ttemplatesjs.render(\"user\", profile, function(err,data){\r\n\t\t\t\tif(err) // Do something with the error\r\n\t\t\t\t\r\n\t\t\t\t//Output the data\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n\r\n```\r\n\r\n\r\nthis will print `\"18helloworldJS\"`\r\n\r\nA loop will be performed which will start form `user[2]` and finish on `user[5]'.\r\nNo whitespace will be added before or after the values.\r\n\t\r\n## format of output\r\n\t\r\nsuppose that we want a for each loop through our array values \r\nusing templatesjs it can be done like\r\n\t\r\n```html\r\n\t<body>\r\n\t\r\n\t\t<%user[] {<a href='user/*'>*</a>}%>  \r\n\t\t<!--\r\n\t\t\t**specify the format in curly braces\r\n\t\t\t** all \"*\" sign will be replaced by the actual\r\n\t\t\t**value with the format specified around it\r\n\t\t\t**remember not to use \" inside the tag, use ' instead.\r\n\t\t-->\r\n\t\t\r\n\t</body>\r\n\t\r\n\t\r\n```\r\n`in node.js file`\r\n\r\n**Sync**\r\n\r\n```js\r\n\tvar data = fs.readFileSync(\"./index.html\");\r\n\ttemplatesjs.setSync(data);\r\n\tvar profiles =[\"John\", \"Doe\"]\r\n\tdata = templatesjs.renderSync(\"user\", profiles)\r\n\t\r\n```\r\n\r\n**Async**\r\n\r\n```js\r\n\tvar data = fs.readFile(\"./index.html\", function(err,data){\r\n\tvar profile =[\"John\", \"Doe\"];\r\n\t\ttemplatesjs.set(data, function(err,data){\r\n\t\t\tif(err) //Do something with the error;\r\n\t\t\ttemplatesjs.render(\"user\", profile, function(err,data){\r\n\t\t\t\tif(err) // Do something with the error\r\n\t\t\t\t\r\n\t\t\t\t//Output the data\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n\r\n```\r\n\r\n\r\noutput : `<a href=\"user/John\">John</a> <a href=\"user/Doe\">Doe</a> `\r\n\t\r\nA loop will be performed and values will be added inside the specified format  \r\nreplacing all \"*\" with actual value. I foyu want a Linebreak at the end of every link  \r\nyou must specify the format as `{<a href=\"user/*\">*</a> <br />}` \r\n\r\n#### for a loop through specified indexes of an array in specified format\r\n```html\r\n\t<body>\r\n\t\r\n\t\t<%user[2,4] {<a href='user/*'>*</a>}%>  \r\n\t\t// not double quotes, I repeat. \r\n\t\t\r\n\t</body>\r\n\t\r\n```\r\n`in node.js file`\r\n\r\n**Sync**\r\n\r\n\r\n```js\r\n\r\n\tvar data = fs.readFileSync(\"./index.html\");\r\n\ttemplatesjs.setSync(data);\r\n\tvar profiles =[\"John\", \"Doe\", \"foo\", \"bar\", \"example\"]\r\n\tdata = templatesjs.renderSync(\"user\", profiles)\r\n\r\n```\r\n\r\n**Asunc**\r\n\r\n\r\n```js\r\n\tvar data = fs.readFile(\"./index.html\", function(err,data){\r\n\tvar profiles =[\"John\", \"Doe\", \"foo\", \"bar\", \"example\"]\r\n\t\ttemplatesjs.set(data, function(err,data){\r\n\t\t\tif(err) //Do something with the error;\r\n\t\t\ttemplatesjs.render(\"user\", profiles, function(err,data){\r\n\t\t\t\tif(err) // Do something with the error\r\n\t\t\t\t\r\n\t\t\t\t//Output the data\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n\r\n```\r\n\r\noutput : `<a href=\"user/foo\">foo</a>  <a href=\"user/bar\">bar</a>  <a href=\"user/example\">ecample</a> `\r\n\t\r\n\t\r\n\t\r\n\t\r\n#### or specify format for only one array index if you want\r\n```html\r\n\t<body>\r\n\t\t<%user[2] {<a href='user/*'>*</a>}%>  \r\n\t\t\r\n\t</body>\r\n\t\r\n\t\r\n```\r\n`in node.js file`\r\n\r\n**Sync**\r\n\r\n```js\r\n\tvar data = fs.readFileSync(\"./index.html\");\r\n\ttemplatesjs.setSync(data);\r\n\tvar profiles =[\"John\", \"Doe\", \"foo\", \"bar\", \"example\"]\r\n\tdata = templatesjs.renderSync(\"user\", profiles)\r\n\t\r\n```\r\n\r\n**Async**\r\n\r\n\r\n```js\r\n\tvar data = fs.readFile(\"./index.html\", function(err,data){\r\n\tvar profiles =[\"John\", \"Doe\", \"foo\", \"bar\", \"example\"]\r\n\t\ttemplatesjs.set(data, function(err,data){\r\n\t\t\tif(err) //Do something with the error;\r\n\t\t\ttemplatesjs.render(\"user\", profiles, function(err,data){\r\n\t\t\t\tif(err) // Do something with the error\r\n\t\t\t\t\r\n\t\t\t\t//Output the data\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n\r\n```\r\n\r\noutput : `<a href=\"user/foo\">foo</a>`\r\n\r\n\t\r\n## Specify case\r\n\r\n**specify output to be UPPERCASE or Capitalized or lowercase**\r\n\t\r\nyou can specify whether the output will be in UPPERCASE, lowercase, Capitalized using a third optional `\"style\"` param \r\nin the `templatesjs.render()` function\r\n\t\r\nthe case param supports three values \"CASE\", \"Case\", or \"case\"\r\n* `\"CASE\"` : for UPPERCASE output;\r\n* `\"Case\"` : for Capitalized output\r\n* `\"case\"` : for lowercase output\r\n\t\r\n```html\r\n\t<body>\r\n\t\r\n\tUPPERCASE: <%uUser%> <br />\r\n\tCapitalized: <%cUser%> <br />\r\n\tlowercase: <%lUser%> <br />\r\n\t\t\r\n\t</body>\r\n\t\r\n```\r\n`in node.js file`\r\n\r\n**Sync**\r\n\r\n```js\r\n\tvar data = fs.readFileSync(\"./index.html\");\r\n\ttemplatesjs.setSync(data);\r\n\tdata = templatesjs.renderSync(\"uUser\", \"john\", \"CASE\") \r\n\t// \"CASE\" for UPPERCASE output\r\n\t\r\n\tdata = templatesjs.renderSync(\"cUser\", \"doE\", \"Case\") \r\n\t// \"Case\" for Capitalized output\r\n\t\r\n\tdata = templatesjs.renderSync(\"l/user\", \"SMith\", \"Case\") \r\n\t// \"case\" for lowercase output\r\n\t\r\n```\r\n**Async**\r\n\r\n\r\n```js\r\n\tvar data = fs.readFile(\"./index.html\", function(err,data){\r\n\tvar profiles =[\"John\", \"Doe\", \"foo\", \"bar\", \"example\"]\r\n\t\r\n\t\ttemplatesjs.set(data, function(err,data){\r\n\t\t\tif(err) //Do something with the error;\r\n\t\t\t\r\n\t\t\ttemplatesjs.render(\"uUser\", \"John\",\"CASE\", function(err,data){\r\n\t\t\t\tif(err) // Do something with the error\r\n\t\t\t\t\r\n\t\t\t\ttemplatesjs.render(\"cUser\", \"doE\", \"Case\", function(err,data){\r\n\t\t\t\t\tif(err) // Do something with the error\r\n\t\t\t\t\t\r\n\t\t\t\t\ttemplatesjs.render(\"lUser\", \"SMith\", \"case\", function(err,data){\r\n\t\t\t\t\t\tif(err) // Do something with the error\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//output the data\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n\r\n```\r\noutput : `UPPERCASE: JOHN `;\r\n\t\t`Capitalized: Doe`;\r\n\t\t`lowercase: smith`;\r\n\r\nAny value for the style parameter other than \"CASE\", \"Case\" or \"case\" will produce an error message on the console  \r\nand consider the value of style as undefined.\r\n\r\nNOTE: Output Styles can't be specified using `renderAll()` or `renderAllSync()` .\r\n\t\r\n## Include file\r\n\t\r\ntemplatesjs also has an include feature which can be used \r\nto include file or template parts just use the `<%include%>` tag in your file \r\n```html\r\n\t<body>\r\n\t\r\n\t\t<%include header.html%>\r\n\t\t\r\n\t\t<h3>Header is above</h3>\r\n\t\t\r\n\t\t<h1>content goes here : </h1>\r\n\t\t<%include posts/content.html%> \r\n\t\t// the file is in ./post/ directory you can also \r\n\t\t//use templatesjs.dir variable to set default\r\n\t\t\r\n\t\t<h2>footer is below</h2>\r\n\t\t\r\n\t\t<%include footer.html%>\r\n\t\t\r\n\t</body>\r\n\t\r\n```\r\n\t\r\nno need to render  anything in the node.js file, the files \twill be rendered \r\nautomatically when you set data using `templatesjs.set()` function;\r\n\t\r\nThe `include` function gets invoked when you set the data for template.\r\nIt will look for every file specified inside <%inlude %> tag and replace the tag with Data read from those files.\r\nBecause include is performed at the very beginning **you can render data inside those included files as well**\r\nIf file not found an error will be thrown.\r\n\r\n## Set default directory\r\n\t\r\nbefore you set data for templatesjs using the `templatesjs.set()` function you can set the default directory where templatesjs will\r\nlook for files it needs to include ;\r\n\t\r\nsuppose that we have all our html files in the \"public\" directory \r\n\t\r\n\r\n`in node.js file`  \r\n\r\n```js\r\n\t \r\n\t templatesjs.dir = \"./public/\";\r\n```\r\nthe default directory (if needed to be set) must be set before setting the data using `set()`. \r\n\r\n## delimiter sign\r\n\t\r\n**Don't like to use the \"%\" sign to define tags in html page you can change them :D :D :D** \r\n\t\r\n`in node.js file`\r\n\r\n```js\r\n\r\n\ttemplatesjs.delim=\"$\";\r\n\t\r\n\t// you can use any sign like [\"!@#$%^&*\"] or \r\n\t//any combination like \"#@\" or \"%$\" or \"*&\" or \"*!\" \r\n\t\r\n```\r\n\r\nIn *1.2.12* or older versions `delim` was a function used like `templatesjs.delim(\"#\");\r\n\r\n\r\n## Shorthands for functions\r\n\t\r\n\r\nare function names too long? Shorthands are availabe :D :D :D \r\n\t\r\nfunctions can also be used as :\r\n\r\n\r\n* *render()* : `ren() r() rn`    \r\n* *renderSync()* : `renSync() rSync() rnSync`    \r\n\t\t  \r\n* *renderAll()* : `renAll() rAll() rnAll() rnall() renall() rall()`    \r\n* *renderAll()* : `renAllSync() rAllSync() rnAllSync() rnallSync() renallSync() rallSync()`   \r\n\t\r\n* *set()*    : `s() setData() sd() setdata()`  \r\n* *setSync()*    : `sSync() setDataSync() sdSync() setdataSync()`  \r\n\t  \r\n\t\r\n## Test\r\n\r\n```sh\r\n\r\n     $ npm test\r\n   \r\n```  \r\nReport any bug or issue on https://github.com/ImtiazChowdhury/templatesjs/issues.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ImtiazChowdhury/templatesjs.git"
  },
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "version": "2.0.0"
}
